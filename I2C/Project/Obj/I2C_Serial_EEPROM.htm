<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\I2C_Serial_EEPROM.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\I2C_Serial_EEPROM.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Nov 10 16:58:18 2016
<BR><P>
<H3>Maximum Stack Usage =        140 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; eeprom &rArr; m24xx_write &rArr; i2c_lpc_m24xx_wr &rArr; m24xx_set_addr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">Undef_Handler</a>
 <LI><a href="#[2]">SWI_Handler</a>
 <LI><a href="#[3]">PAbt_Handler</a>
 <LI><a href="#[4]">DAbt_Handler</a>
 <LI><a href="#[5]">IRQ_Handler</a>
 <LI><a href="#[6]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">Undef_Handler</a><BR>
 <LI><a href="#[2]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">SWI_Handler</a><BR>
 <LI><a href="#[3]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">PAbt_Handler</a><BR>
 <LI><a href="#[4]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">DAbt_Handler</a><BR>
 <LI><a href="#[5]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IRQ_Handler</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">Ext_ISR</a> from extn_int.o(.text) referenced from extn_int.o(.text)
 <LI><a href="#[6]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(RESET)
 <LI><a href="#[9]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[8]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[3b]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[38]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3d]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3e]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3f]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[40]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[41]"></a>main2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>eeprom</STRONG> (ARM, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = eeprom &rArr; m24xx_write &rArr; i2c_lpc_m24xx_wr &rArr; m24xx_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>main</STRONG> (ARM, 124 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = main &rArr; eeprom &rArr; m24xx_write &rArr; i2c_lpc_m24xx_wr &rArr; m24xx_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_interrupt
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10]"></a>i2c_lpc_init</STRONG> (ARM, 128 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_set
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>m24xx_write</STRONG> (ARM, 304 bytes, Stack size 40 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = m24xx_write &rArr; i2c_lpc_m24xx_wr &rArr; m24xx_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom
</UL>

<P><STRONG><a name="[12]"></a>m24xx_read</STRONG> (ARM, 300 bytes, Stack size 56 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = m24xx_read &rArr; m24xx_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_set_addr
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_page_size
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>lm75_read16</STRONG> (ARM, 220 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_get_temp
</UL>

<P><STRONG><a name="[20]"></a>lm75_read_cfg</STRONG> (ARM, 188 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[21]"></a>lm75_write16</STRONG> (ARM, 136 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[22]"></a>lm75_write_cfg</STRONG> (ARM, 120 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_set_addr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_init
</UL>

<P><STRONG><a name="[23]"></a>lm75_init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
</UL>

<P><STRONG><a name="[24]"></a>lm75_get_temp</STRONG> (ARM, 36 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
</UL>

<P><STRONG><a name="[25]"></a>pca9555_write</STRONG> (ARM, 84 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[26]"></a>pca9555_read</STRONG> (ARM, 148 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>

<P><STRONG><a name="[29]"></a>ds1307_toBCD</STRONG> (ARM, 64 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_set
</UL>

<P><STRONG><a name="[2c]"></a>ds1307_fromBCD</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
</UL>

<P><STRONG><a name="[27]"></a>ds1307_wr_regs</STRONG> (ARM, 88 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_set
</UL>

<P><STRONG><a name="[28]"></a>ds1307_set</STRONG> (ARM, 164 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_toBCD
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_init
</UL>

<P><STRONG><a name="[2a]"></a>ds1307_rd_regs</STRONG> (ARM, 116 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_get
</UL>

<P><STRONG><a name="[2b]"></a>ds1307_get</STRONG> (ARM, 204 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_fromBCD
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_init
</UL>

<P><STRONG><a name="[2e]"></a>delay</STRONG> (ARM, 52 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[2d]"></a>wait_lcd</STRONG> (ARM, 112 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[2f]"></a>lcd_command_write</STRONG> (ARM, 204 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[34]"></a>set_lcd_port_output</STRONG> (ARM, 56 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[30]"></a>lcd_clear</STRONG> (ARM, 16 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_clear &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[31]"></a>lcd_gotoxy</STRONG> (ARM, 92 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[32]"></a>lcd_data_write</STRONG> (ARM, 152 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
</UL>

<P><STRONG><a name="[33]"></a>lcd_putchar</STRONG> (ARM, 20 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>

<P><STRONG><a name="[11]"></a>lcd_putstring</STRONG> (ARM, 76 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>lcd_backlight_on</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>turn_off_lcd_back_light_cb</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>init_lcd</STRONG> (ARM, 64 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_lcd &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_port_output
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>main1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, extn_int.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>delay1</STRONG> (ARM, 52 bytes, Stack size 0 bytes, extn_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_ISR
</UL>

<P><STRONG><a name="[35]"></a>Ext_ISR</STRONG> (ARM, 68 bytes, Stack size 24 bytes, extn_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ext_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> extn_int.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>init_ext_interrupt</STRONG> (ARM, 132 bytes, Stack size 0 bytes, extn_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_write
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_uidivmod</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[c]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[47]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__0sprintf$1</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[48]"></a>__1sprintf$1</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[14]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4a]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4b]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>i2c_lpc_wr_byte</STRONG> (ARM, 44 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_write
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
</UL>

<P><STRONG><a name="[16]"></a>i2c_lpc_stop</STRONG> (ARM, 32 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_write
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
</UL>

<P><STRONG><a name="[15]"></a>i2c_lpc_ctrl</STRONG> (ARM, 160 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_wr_regs
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_write
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
</UL>

<P><STRONG><a name="[1d]"></a>i2c_lpc_rx_to_buf</STRONG> (ARM, 256 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds1307_rd_regs
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pca9555_read
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
</UL>

<P><STRONG><a name="[1a]"></a>i2c_lpc_ask_polling_op</STRONG> (ARM, 168 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
</UL>

<P><STRONG><a name="[1b]"></a>m24xx_page_size</STRONG> (ARM, 344 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = m24xx_page_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_write
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
</UL>

<P><STRONG><a name="[18]"></a>m24xx_set_addr</STRONG> (ARM, 408 bytes, Stack size 28 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = m24xx_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_m24xx_wr
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_read
</UL>

<P><STRONG><a name="[17]"></a>i2c_lpc_m24xx_wr</STRONG> (ARM, 200 bytes, Stack size 48 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = i2c_lpc_m24xx_wr &rArr; m24xx_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_set_addr
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ask_polling_op
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m24xx_write
</UL>

<P><STRONG><a name="[1f]"></a>lm75_set_addr</STRONG> (ARM, 160 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write_cfg
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_write16
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read_cfg
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lm75_read16
</UL>

<P><STRONG><a name="[3a]"></a>_printf_core</STRONG> (ARM, 524 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[9]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
